import os
import logging
from datetime import datetime
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Callable, Any
from functools import wraps
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.responses import JSONResponse

from .models import (
    PredictionRequest,
    PredictionResponse,
    MultipleHorizonsRequest,
    MultipleHorizonsResponse,
    ModelInfoResponse,
    HealthResponse,
)
from .service import CyclonePredictionService

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

prediction_service: CyclonePredictionService | None = None


def handle_errors(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö."""

    @wraps(func)
    async def wrapper(*args: Any, **kwargs: Any) -> Any:
        try:
            return await func(*args, **kwargs)
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            raise HTTPException(status_code=500, detail=str(e))

    return wrapper


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global prediction_service

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    model_path = os.getenv("MODEL_PATH", "weights/model.onnx")
    pipeline_type = os.getenv("PIPELINE_TYPE", "fast")

    try:
        prediction_service = CyclonePredictionService(model_path=model_path, pipeline_type=pipeline_type)
        logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {model_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        raise

    yield

    logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞...")


app = FastAPI(
    title="Cyclone Trajectory Prediction API",
    description="API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Ü–∏–∫–ª–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
)


def get_prediction_service() -> CyclonePredictionService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    if prediction_service is None:
        raise HTTPException(status_code=503, detail="–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return prediction_service


@app.get("/", response_model=dict)
async def root() -> dict:
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç."""
    return {"message": "Cyclone Trajectory Prediction API", "version": "1.0.0", "docs": "/docs", "health": "/health"}


@app.get("/health", response_model=HealthResponse)
async def health_check(service: CyclonePredictionService = Depends(get_prediction_service)) -> HealthResponse:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        is_healthy = service.is_healthy()
        return HealthResponse(
            status="healthy" if is_healthy else "unhealthy", model_loaded=is_healthy, timestamp=datetime.now()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return HealthResponse(status="unhealthy", model_loaded=False, timestamp=datetime.now())


@app.get("/model/info", response_model=ModelInfoResponse)
@handle_errors
async def get_model_info(service: CyclonePredictionService = Depends(get_prediction_service)) -> ModelInfoResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏."""
    return service.get_model_info()


@app.post("/predict", response_model=PredictionResponse)
@handle_errors
async def predict(
    request: PredictionRequest, service: CyclonePredictionService = Depends(get_prediction_service)
) -> PredictionResponse:
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–Ω–∞.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ–≥–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.
    """
    result = service.predict(
        cyclone_data=request.cyclone_data, horizon_hours=request.horizon_hours, batch_size=request.batch_size
    )
    return PredictionResponse(**result)


@app.post("/predict/multiple-horizons", response_model=MultipleHorizonsResponse)
@handle_errors
async def predict_multiple_horizons(
    request: MultipleHorizonsRequest, service: CyclonePredictionService = Depends(get_prediction_service)
) -> MultipleHorizonsResponse:
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –µ–≥–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏.
    """
    result = service.predict_multiple_horizons(
        cyclone_data=request.cyclone_data, horizons=request.horizons, batch_size=request.batch_size
    )
    return MultipleHorizonsResponse(**result)


@app.post("/model/reload")
@handle_errors
async def reload_model(service: CyclonePredictionService = Depends(get_prediction_service)) -> dict:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏."""
    service.reload_model()
    return {"message": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"}


@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
    return JSONResponse(status_code=500, content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("api.main:app", host="0.0.0.0", port=8000, reload=True, log_level="info")
