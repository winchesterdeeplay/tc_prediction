from typing import Any

import folium
import numpy as np
import pandas as pd
from IPython.display import HTML, display
from tabulate import tabulate

from core.features import FeatureConfig
from evaluation.evaluator import extract_current_coordinates
from inference import ONNXInferencePipeline, ONNXInferencePipelineFactory


def extract_coordinates_from_dataframe(cyclone_data: pd.DataFrame) -> tuple[np.ndarray, np.ndarray]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–Ω–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    cyclone_data : pd.DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–æ–Ω–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ª–∏–±–æ —Å—Ç–æ–ª–±—Ü—ã 'lat'/'lon',
        –ª–∏–±–æ —Å—Ç–æ–ª–±–µ—Ü 'sequences'

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------
    tuple[np.ndarray, np.ndarray]
        –ú–∞—Å—Å–∏–≤—ã —à–∏—Ä–æ—Ç –∏ –¥–æ–ª–≥–æ—Ç
    """
    if "lat" in cyclone_data.columns and "lon" in cyclone_data.columns:
        return cyclone_data["lat"].values, cyclone_data["lon"].values
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        lats = []
        lons = []
        for seq in cyclone_data["sequences"]:
            lat, lon = extract_current_coordinates(seq)
            lats.append(lat)
            lons.append(lon)
        return np.array(lats), np.array(lons)


def calculate_error_metrics(
    true_lats: np.ndarray, true_lons: np.ndarray, pred_lats: np.ndarray, pred_lons: np.ndarray
) -> tuple[list[float], list[float], list[float]]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    true_lats : np.ndarray
        –ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–æ—Ç—ã
    true_lons : np.ndarray
        –ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–≥–æ—Ç—ã
    pred_lats : np.ndarray
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–æ—Ç—ã
    pred_lons : np.ndarray
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–≥–æ—Ç—ã

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------
    tuple[list[float], list[float], list[float]]
        (errors_km, displacements_km, directions)
    """
    errors_km = []
    displacements_km = []
    directions = []

    for i in range(len(true_lats)):
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        lat_diff = pred_lats[i] - true_lats[i]
        lon_diff = pred_lons[i] - true_lons[i]
        lat_km = lat_diff * 111
        lon_km = lon_diff * 111 * np.cos(np.radians(true_lats[i]))
        error_km = np.sqrt(lat_km**2 + lon_km**2)
        errors_km.append(error_km)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        displacement_km = np.sqrt(
            (pred_lats[i] - true_lats[i]) ** 2 * 111**2
            + (pred_lons[i] - true_lons[i]) ** 2 * 111**2 * np.cos(np.radians(true_lats[i])) ** 2
        )
        displacements_km.append(displacement_km)

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        if displacement_km > 0:
            direction = np.degrees(np.arctan2(lon_diff, lat_diff))
            if direction < 0:
                direction += 360
            directions.append(direction)
        else:
            directions.append(0)

    return errors_km, displacements_km, directions


def get_error_category(error_km: float) -> tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏ –∏ —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–ª–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    error_km : float
        –û—à–∏–±–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------
    tuple[str, str]
        (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ü–≤–µ—Ç)
    """
    if error_km < 50:
        return "–û—Ç–ª–∏—á–Ω–æ–µ", "green"
    elif error_km < 100:
        return "–•–æ—Ä–æ—à–µ–µ", "orange"
    elif error_km < 200:
        return "–ü–ª–æ—Ö–æ–µ", "red"
    else:
        return "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ", "darkred"


def create_popup_html(
    point_idx: int,
    true_lat: float,
    true_lon: float,
    pred_lat: float,
    pred_lon: float,
    error_km: float,
    displacement_km: float,
    direction: float,
    pred_delta_lat: float,
    pred_delta_lon: float,
    timestamp_info: str = "",
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    point_idx : int
        –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏
    true_lat, true_lon : float
        –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    pred_lat, pred_lon : float
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    error_km : float
        –û—à–∏–±–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    displacement_km : float
        –°–º–µ—â–µ–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    direction : float
        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    pred_delta_lat, pred_delta_lon : float
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–µ–ª—å—Ç—ã
    timestamp_info : str
        –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------
    str
        HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    """
    category, color = get_error_category(error_km)

    return f"""
    <div style="width: 280px; font-family: Arial, sans-serif;">
        <h3 style="color: {color}; margin: 0 0 10px 0;">–¢–æ—á–∫–∞ {point_idx+1}</h3>
        {timestamp_info}
        <div style="background-color: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0;">
            <h4 style="margin: 0 0 5px 0;">–ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</h4>
            <p style="margin: 2px 0;">üåç –®–∏—Ä–æ—Ç–∞: {true_lat:.4f}¬∞</p>
            <p style="margin: 2px 0;">üåç –î–æ–ª–≥–æ—Ç–∞: {true_lon:.4f}¬∞</p>
        </div>
        <div style="background-color: #fff3cd; padding: 8px; border-radius: 5px; margin: 5px 0;">
            <h4 style="margin: 0 0 5px 0;">–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</h4>
            <p style="margin: 2px 0;">üéØ –®–∏—Ä–æ—Ç–∞: {pred_lat:.4f}¬∞</p>
            <p style="margin: 2px 0;">üéØ –î–æ–ª–≥–æ—Ç–∞: {pred_lon:.4f}¬∞</p>
        </div>
        <div style="background-color: #d1ecf1; padding: 8px; border-radius: 5px; margin: 5px 0;">
            <h4 style="margin: 0 0 5px 0;">–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
            <p style="margin: 2px 0;">üìè –û—à–∏–±–∫–∞: <strong>{error_km:.1f} –∫–º</strong> ({category})</p>
            <p style="margin: 2px 0;">üöÄ –°–º–µ—â–µ–Ω–∏–µ: <strong>{displacement_km:.1f} –∫–º</strong></p>
            <p style="margin: 2px 0;">üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <strong>{direction:.1f}¬∞</strong></p>
        </div>
        <div style="background-color: #e2e3e5; padding: 8px; border-radius: 5px; margin: 5px 0;">
            <h4 style="margin: 0 0 5px 0;">–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–µ–ª—å—Ç—ã</h4>
            <p style="margin: 2px 0;">Œîlat: {pred_delta_lat:.4f}¬∞</p>
            <p style="margin: 2px 0;">Œîlon: {pred_delta_lon:.4f}¬∞</p>
        </div>
    </div>
    """


def plot_trajectory(pipeline: Any, cyclone_data: pd.DataFrame, cyclone_id: str, horizon_hours: int = 24) -> None:
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Ü–∏–∫–ª–æ–Ω–∞: –∏—Å—Ç–∏–Ω–Ω—É—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    pipeline : Any
        ONNX Inference Pipeline —Å –º–µ—Ç–æ–¥–æ–º predict
    cyclone_data : pd.DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–æ–Ω–æ–≤
    cyclone_id : str
        ID —Ü–∏–∫–ª–æ–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    horizon_hours : int
        –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —á–∞—Å–∞—Ö (6, 12, 24, 48)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cyclone_id —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    cyclone_id = str(cyclone_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è cyclone_id —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        cyclone_subset = cyclone_data[cyclone_data["intl_id"].astype(str) == cyclone_id].copy()
    except (KeyError, AttributeError) as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ intl_id: {e}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(cyclone_data.columns)}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    if len(cyclone_subset) == 0:
        raise ValueError(f"–¶–∏–∫–ª–æ–Ω —Å ID {cyclone_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cyclone_subset = cyclone_subset.sort_values("analysis_time").reset_index(drop=True)

    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    true_lats: list[float] = []
    true_lons: list[float] = []
    pred_lats: list[float] = []
    pred_lons: list[float] = []

    for i in range(len(cyclone_subset)):
        # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è –µ—ë)
        current_slice = cyclone_subset.iloc[: i + 1].copy()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–µ–∑–∞
            prediction = pipeline.predict(current_slice, horizon_hours=horizon_hours)

            if len(prediction) > 0:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏)
                last_pred = prediction.iloc[-1]

                # –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞)
                true_lat = last_pred["lat_deg"]
                true_lon = last_pred["lon_deg"]

                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                pred_lat = last_pred["lat_pred"]
                pred_lon = last_pred["lon_pred"]

                true_lats.append(true_lat)
                true_lons.append(true_lon)
                pred_lats.append(pred_lat)
                pred_lons.append(pred_lon)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                current_point = cyclone_subset.iloc[i]
                true_lats.append(current_point["lat_deg"])
                true_lons.append(current_point["lon_deg"])
                pred_lats.append(current_point["lat_deg"])
                pred_lons.append(current_point["lon_deg"])

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            current_point = cyclone_subset.iloc[i]
            true_lats.append(current_point["lat_deg"])
            true_lons.append(current_point["lon_deg"])
            pred_lats.append(current_point["lat_deg"])
            pred_lons.append(current_point["lon_deg"])

    if len(true_lats) == 0:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    # Convert to numpy arrays
    true_lats_array = np.array(true_lats)
    true_lons_array = np.array(true_lons)
    pred_lats_array = np.array(pred_lats)
    pred_lons_array = np.array(pred_lons)

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    errors_km, displacements_km, _ = calculate_error_metrics(
        true_lats_array, true_lons_array, pred_lats_array, pred_lons_array
    )

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    m = folium.Map(location=[np.mean(true_lats_array), np.mean(true_lons_array)], zoom_start=5)

    # –ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
    folium.PolyLine(
        list(zip(true_lats_array, true_lons_array)), color="green", weight=3, opacity=0.8, tooltip="–ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è"
    ).add_to(m)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
    folium.PolyLine(
        list(zip(pred_lats_array, pred_lons_array)),
        color="red",
        weight=3,
        opacity=0.8,
        tooltip="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
    ).add_to(m)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    for i in range(len(true_lats_array)):
        category, color = get_error_category(errors_km[i])

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        popup_html = create_popup_html(
            i,
            true_lats_array[i],
            true_lons_array[i],
            pred_lats_array[i],
            pred_lons_array[i],
            errors_km[i],
            displacements_km[i],
            0,
            0,  # dlat_pred
            0,  # dlon_pred
        )

        # –¢–æ—á–∫–∞ –∏—Å—Ç–∏–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        folium.CircleMarker(
            location=[true_lats_array[i], true_lons_array[i]],
            radius=6,
            color=color,
            fill=True,
            fillColor=color,
            fillOpacity=0.7,
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=f"–¢–æ—á–∫–∞ {i+1}: {category} ({errors_km[i]:.1f} –∫–º)",
        ).add_to(m)

        # –¢–æ—á–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        folium.CircleMarker(
            location=[pred_lats_array[i], pred_lons_array[i]],
            radius=4,
            color="red",
            fill=True,
            fillColor="red",
            fillOpacity=0.5,
            tooltip=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {i+1}",
        ).add_to(m)

    # –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
    folium.Marker(
        [true_lats_array[0], true_lons_array[0]], popup="–ù–∞—á–∞–ª–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏", icon=folium.Icon(color="blue", icon="play")
    ).add_to(m)

    folium.Marker(
        [true_lats_array[-1], true_lons_array[-1]],
        popup="–ö–æ–Ω–µ—Ü (–∏—Å—Ç–∏–Ω–Ω—ã–π)",
        icon=folium.Icon(color="green", icon="stop"),
    ).add_to(m)

    folium.Marker(
        [pred_lats_array[-1], pred_lons_array[-1]],
        popup="–ö–æ–Ω–µ—Ü (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π)",
        icon=folium.Icon(color="red", icon="stop"),
    ).add_to(m)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_error = np.mean(errors_km)
    max_error = np.max(errors_km)

    stats_html = f"""
    <div style="position: fixed; 
                top: 10px; right: 10px; width: 220px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 8px 0;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
        <p style="margin: 2px 0;"><strong>–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong> {avg_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:</strong> {max_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:</strong> {len(errors_km)}</p>
        <p style="margin: 2px 0;"><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</strong> {horizon_hours} —á</p>
        <hr style="margin: 6px 0;">
        <p style="margin: 2px 0; font-size: 10px;">üü¢ &lt; 50 –∫–º | üü† 50-100 –∫–º | üî¥ 100-200 –∫–º | ‚ö´ &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(stats_html))  # type: ignore[attr-defined]

    # –õ–µ–≥–µ–Ω–¥–∞
    legend_html = """
    <div style="position: fixed; 
                bottom: 10px; left: 10px; width: 180px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 6px 0;">üéØ –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–Ω–∞</h4>
        <p style="margin: 2px 0;"><span style="color:green;">‚îÅ‚îÅ‚îÅ</span> –ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;"><span style="color:red;">‚îÅ‚îÅ‚îÅ</span> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;">üü¢ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &lt; 50 –∫–º</p>
        <p style="margin: 2px 0;">üü† –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 50-100 –∫–º</p>
        <p style="margin: 2px 0;">üî¥ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 100-200 –∫–º</p>
        <p style="margin: 2px 0;">‚ö´ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(legend_html))  # type: ignore[attr-defined]

    display(m)


def plot_error_distribution(errors: np.ndarray) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    errors : np.ndarray
        –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    """
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—à–∏–±–æ–∫
    c0 = int((errors < 50).sum())
    c1 = int(((errors >= 50) & (errors < 100)).sum())
    c2 = int(((errors >= 100) & (errors < 300)).sum())
    c3 = int((errors >= 300).sum())

    html = f"""
    <div style="width: 100%; height: 400px;">
        <canvas id="errorDistChart"></canvas>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('errorDistChart').getContext('2d');
        new Chart(ctx, {{
            type: 'bar',
            data: {{
                labels: ['0-50', '50-100', '100-300', '300+'],
                datasets: [{{
                    label: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (–∫–º)',
                    data: [{c0}, {c1}, {c2}, {c3}],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 99, 132, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }}]
            }},
            options: {{
                scales: {{
                    y: {{
                        beginAtZero: true
                    }}
                }}
            }}
        }});
    </script>
    """
    display(HTML(html))


def plot_enhanced_trajectory(
    pipeline: Any, cyclone_data: pd.DataFrame, cyclone_id: str, include_timestamps: bool = True, horizon_hours: int = 24
) -> None:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    pipeline : Any
        ONNX Inference Pipeline —Å –º–µ—Ç–æ–¥–æ–º predict
    cyclone_data : pd.DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–æ–Ω–æ–≤
    cyclone_id : str
        ID —Ü–∏–∫–ª–æ–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    include_timestamps : bool
        –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    horizon_hours : int
        –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —á–∞—Å–∞—Ö (6, 12, 24, 48)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cyclone_id —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    cyclone_id = str(cyclone_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è cyclone_id —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        cyclone_subset = cyclone_data[cyclone_data["intl_id"].astype(str) == cyclone_id].copy()
    except (KeyError, AttributeError) as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ intl_id: {e}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(cyclone_data.columns)}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    if len(cyclone_subset) == 0:
        raise ValueError(f"–¶–∏–∫–ª–æ–Ω —Å ID {cyclone_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cyclone_subset = cyclone_subset.sort_values("analysis_time").reset_index(drop=True)

    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    true_lats: list[float] = []
    true_lons: list[float] = []
    pred_lats: list[float] = []
    pred_lons: list[float] = []
    timestamps = []

    for i in range(len(cyclone_subset)):
        # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è –µ—ë)
        current_slice = cyclone_subset.iloc[: i + 1].copy()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–µ–∑–∞
            prediction = pipeline.predict(current_slice, horizon_hours=horizon_hours)

            if len(prediction) > 0:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏)
                last_pred = prediction.iloc[-1]

                # –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞)
                true_lat = last_pred["lat_deg"]
                true_lon = last_pred["lon_deg"]

                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                pred_lat = last_pred["lat_pred"]
                pred_lon = last_pred["lon_pred"]

                true_lats.append(true_lat)
                true_lons.append(true_lon)
                pred_lats.append(pred_lat)
                pred_lons.append(pred_lon)
                timestamps.append(cyclone_subset.iloc[i]["analysis_time"])
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                current_point = cyclone_subset.iloc[i]
                true_lats.append(current_point["lat_deg"])
                true_lons.append(current_point["lon_deg"])
                pred_lats.append(current_point["lat_deg"])
                pred_lons.append(current_point["lon_deg"])
                timestamps.append(current_point["analysis_time"])

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            current_point = cyclone_subset.iloc[i]
            true_lats.append(current_point["lat_deg"])
            true_lons.append(current_point["lon_deg"])
            pred_lats.append(current_point["lat_deg"])
            pred_lons.append(current_point["lon_deg"])
            timestamps.append(current_point["analysis_time"])

    if len(true_lats) == 0:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    # Convert to numpy arrays
    true_lats_array = np.array(true_lats)
    true_lons_array = np.array(true_lons)
    pred_lats_array = np.array(pred_lats)
    pred_lons_array = np.array(pred_lons)

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    errors_km, displacements_km, directions_deg = calculate_error_metrics(
        true_lats_array, true_lons_array, pred_lats_array, pred_lons_array
    )

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    m = folium.Map(location=[np.mean(true_lats_array), np.mean(true_lons_array)], zoom_start=5)

    # –ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
    folium.PolyLine(
        list(zip(true_lats_array, true_lons_array)), color="green", weight=3, opacity=0.8, tooltip="–ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è"
    ).add_to(m)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
    folium.PolyLine(
        list(zip(pred_lats_array, pred_lons_array)),
        color="red",
        weight=3,
        opacity=0.8,
        tooltip="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
    ).add_to(m)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    for i in range(len(true_lats_array)):
        category, color = get_error_category(errors_km[i])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
        timestamp_info = ""
        if include_timestamps and i < len(timestamps):
            try:
                timestamp = timestamps[i]
                if isinstance(timestamp, str):
                    timestamp_info = f"<p><strong>–í—Ä–µ–º—è:</strong> {timestamp}</p>"
                elif hasattr(timestamp, "strftime"):
                    timestamp_info = f"<p><strong>–í—Ä–µ–º—è:</strong> {timestamp.strftime('%Y-%m-%d %H:%M')}</p>"
            except:
                pass

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        popup_html = create_popup_html(
            i,
            true_lats_array[i],
            true_lons_array[i],
            pred_lats_array[i],
            pred_lons_array[i],
            errors_km[i],
            displacements_km[i],
            directions_deg[i],
            0,  # dlat_pred
            0,  # dlon_pred
            timestamp_info,
        )

        # –¢–æ—á–∫–∞ –∏—Å—Ç–∏–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        folium.CircleMarker(
            location=[true_lats_array[i], true_lons_array[i]],
            radius=6,
            color=color,
            fill=True,
            fillColor=color,
            fillOpacity=0.7,
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=f"–¢–æ—á–∫–∞ {i+1}: {category} ({errors_km[i]:.1f} –∫–º)",
        ).add_to(m)

        # –¢–æ—á–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        folium.CircleMarker(
            location=[pred_lats_array[i], pred_lons_array[i]],
            radius=4,
            color="red",
            fill=True,
            fillColor="red",
            fillOpacity=0.5,
            tooltip=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {i+1}",
        ).add_to(m)

    # –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
    folium.Marker(
        [true_lats_array[0], true_lons_array[0]], popup="–ù–∞—á–∞–ª–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏", icon=folium.Icon(color="blue", icon="play")
    ).add_to(m)

    folium.Marker(
        [true_lats_array[-1], true_lons_array[-1]],
        popup="–ö–æ–Ω–µ—Ü (–∏—Å—Ç–∏–Ω–Ω—ã–π)",
        icon=folium.Icon(color="green", icon="stop"),
    ).add_to(m)

    folium.Marker(
        [pred_lats_array[-1], pred_lons_array[-1]],
        popup="–ö–æ–Ω–µ—Ü (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π)",
        icon=folium.Icon(color="red", icon="stop"),
    ).add_to(m)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_error = np.mean(errors_km)
    max_error = np.max(errors_km)

    stats_html = f"""
    <div style="position: fixed; 
                top: 10px; right: 10px; width: 220px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 8px 0;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
        <p style="margin: 2px 0;"><strong>–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong> {avg_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:</strong> {max_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:</strong> {len(errors_km)}</p>
        <p style="margin: 2px 0;"><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</strong> {horizon_hours} —á</p>
        <hr style="margin: 6px 0;">
        <p style="margin: 2px 0; font-size: 10px;">üü¢ &lt; 50 –∫–º | üü† 50-100 –∫–º | üî¥ 100-200 –∫–º | ‚ö´ &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(stats_html))  # type: ignore[attr-defined]

    # –õ–µ–≥–µ–Ω–¥–∞
    legend_html = """
    <div style="position: fixed; 
                bottom: 10px; left: 10px; width: 180px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 6px 0;">üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</h4>
        <p style="margin: 2px 0;"><span style="color:green;">‚îÅ‚îÅ‚îÅ</span> –ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;"><span style="color:red;">‚îÅ‚îÅ‚îÅ</span> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;">üü¢ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &lt; 50 –∫–º</p>
        <p style="margin: 2px 0;">üü† –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 50-100 –∫–º</p>
        <p style="margin: 2px 0;">üî¥ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 100-200 –∫–º</p>
        <p style="margin: 2px 0;">‚ö´ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(legend_html))  # type: ignore[attr-defined]

    display(m)


def plot_animated_trajectory(
    pipeline: Any, cyclone_data: pd.DataFrame, cyclone_id: str, animation_speed: int = 1000, horizon_hours: int = 24
) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º inference pipeline.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    pipeline : Any
        ONNX Inference Pipeline —Å –º–µ—Ç–æ–¥–æ–º predict
    cyclone_data : pd.DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–æ–Ω–æ–≤
    cyclone_id : str
        ID —Ü–∏–∫–ª–æ–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    animation_speed : int
        –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    horizon_hours : int
        –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —á–∞—Å–∞—Ö (6, 12, 24, 48)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cyclone_id —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    cyclone_id = str(cyclone_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è cyclone_id —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        cyclone_subset = cyclone_data[cyclone_data["intl_id"].astype(str) == cyclone_id].copy()
    except (KeyError, AttributeError) as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ intl_id: {e}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(cyclone_data.columns)}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    if len(cyclone_subset) == 0:
        raise ValueError(f"–¶–∏–∫–ª–æ–Ω —Å ID {cyclone_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cyclone_subset = cyclone_subset.sort_values("analysis_time").reset_index(drop=True)

    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    true_lats: list[float] = []
    true_lons: list[float] = []
    pred_lats: list[float] = []
    pred_lons: list[float] = []

    for i in range(len(cyclone_subset)):
        # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è –µ—ë)
        current_slice = cyclone_subset.iloc[: i + 1].copy()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–µ–∑–∞
            prediction = pipeline.predict(current_slice, horizon_hours=horizon_hours)

            if len(prediction) > 0:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏)
                last_pred = prediction.iloc[-1]

                # –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞)
                true_lat = last_pred["lat_deg"]
                true_lon = last_pred["lon_deg"]

                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                pred_lat = last_pred["lat_pred"]
                pred_lon = last_pred["lon_pred"]

                true_lats.append(true_lat)
                true_lons.append(true_lon)
                pred_lats.append(pred_lat)
                pred_lons.append(pred_lon)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                current_point = cyclone_subset.iloc[i]
                true_lats.append(current_point["lat_deg"])
                true_lons.append(current_point["lon_deg"])
                pred_lats.append(current_point["lat_deg"])
                pred_lons.append(current_point["lon_deg"])

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            current_point = cyclone_subset.iloc[i]
            true_lats.append(current_point["lat_deg"])
            true_lons.append(current_point["lon_deg"])
            pred_lats.append(current_point["lat_deg"])
            pred_lons.append(current_point["lon_deg"])

    if len(true_lats) == 0:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")

    # Convert to numpy arrays
    true_lats_array = np.array(true_lats)
    true_lons_array = np.array(true_lons)
    pred_lats_array = np.array(pred_lats)
    pred_lons_array = np.array(pred_lons)

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫–∏
    errors_km, _, _ = calculate_error_metrics(true_lats_array, true_lons_array, pred_lats_array, pred_lons_array)

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    from folium import plugins

    m = folium.Map(location=[np.mean(true_lats_array), np.mean(true_lons_array)], zoom_start=5, tiles="OpenStreetMap")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    true_trajectory = [[lat, lon] for lat, lon in zip(true_lats_array, true_lons_array)]
    pred_trajectory = [[lat, lon] for lat, lon in zip(pred_lats_array, pred_lons_array)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
    plugins.AntPath(
        locations=true_trajectory,
        popup="–ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
        color="green",
        weight=3,
        opacity=0.8,
        delay=animation_speed,
    ).add_to(m)

    plugins.AntPath(
        locations=pred_trajectory,
        popup="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
        color="red",
        weight=3,
        opacity=0.8,
        delay=animation_speed,
    ).add_to(m)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    for i in range(len(true_lats_array)):
        category, color = get_error_category(errors_km[i])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
        timestamp_info = ""
        if i < len(cyclone_subset):
            try:
                timestamp = cyclone_subset.iloc[i]["analysis_time"]
                if isinstance(timestamp, str):
                    timestamp_info = f"<p><strong>–í—Ä–µ–º—è:</strong> {timestamp}</p>"
                elif hasattr(timestamp, "strftime"):
                    timestamp_info = f"<p><strong>–í—Ä–µ–º—è:</strong> {timestamp.strftime('%Y-%m-%d %H:%M')}</p>"
            except:
                pass

        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        popup_html = create_popup_html(
            i,
            true_lats_array[i],
            true_lons_array[i],
            pred_lats_array[i],
            pred_lons_array[i],
            errors_km[i],
            0,
            0,
            0,  # dlat_pred
            0,  # dlon_pred
            timestamp_info,
        )

        # –¢–æ—á–∫–∞ –∏—Å—Ç–∏–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        folium.CircleMarker(
            location=[true_lats_array[i], true_lons_array[i]],
            radius=6,
            color=color,
            fill=True,
            fillColor=color,
            fillOpacity=0.7,
            weight=2,
            popup=folium.Popup(popup_html, max_width=280),
            tooltip=f"–¢–æ—á–∫–∞ {i+1}: {category} ({errors_km[i]:.1f} –∫–º)",
        ).add_to(m)

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    folium.Marker(
        [true_lats_array[0], true_lons_array[0]],
        popup="üöÄ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏",
        icon=folium.Icon(color="blue", icon="play", prefix="fa"),
    ).add_to(m)

    folium.Marker(
        [true_lats_array[-1], true_lons_array[-1]],
        popup="‚úÖ –ö–æ–Ω–µ—Ü (–∏—Å—Ç–∏–Ω–Ω—ã–π)",
        icon=folium.Icon(color="green", icon="stop", prefix="fa"),
    ).add_to(m)

    folium.Marker(
        [pred_lats_array[-1], pred_lons_array[-1]],
        popup="üéØ –ö–æ–Ω–µ—Ü (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π)",
        icon=folium.Icon(color="red", icon="stop", prefix="fa"),
    ).add_to(m)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_error = np.mean(errors_km)
    max_error = np.max(errors_km)

    stats_html = f"""
    <div style="position: fixed; 
                top: 10px; right: 10px; width: 220px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 8px 0;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
        <p style="margin: 2px 0;"><strong>–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong> {avg_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:</strong> {max_error:.1f} –∫–º</p>
        <p style="margin: 2px 0;"><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:</strong> {len(errors_km)}</p>
        <p style="margin: 2px 0;"><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</strong> {horizon_hours} —á</p>
        <hr style="margin: 6px 0;">
        <p style="margin: 2px 0; font-size: 10px;">üü¢ &lt; 50 –∫–º | üü† 50-100 –∫–º | üî¥ 100-200 –∫–º | ‚ö´ &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(stats_html))  # type: ignore[attr-defined]

    # –õ–µ–≥–µ–Ω–¥–∞
    legend_html = """
    <div style="position: fixed; 
                bottom: 10px; left: 10px; width: 180px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:11px; padding: 8px; border-radius: 5px;">
        <h4 style="margin: 0 0 6px 0;">üé¨ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</h4>
        <p style="margin: 2px 0;"><span style="color:green;">‚îÅ‚îÅ‚îÅ</span> –ò—Å—Ç–∏–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;"><span style="color:red;">‚îÅ‚îÅ‚îÅ</span> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</p>
        <p style="margin: 2px 0;">üü¢ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &lt; 50 –∫–º</p>
        <p style="margin: 2px 0;">üü† –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 50-100 –∫–º</p>
        <p style="margin: 2px 0;">üî¥ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π 100-200 –∫–º</p>
        <p style="margin: 2px 0;">‚ö´ –¢–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π &gt; 200 –∫–º</p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(legend_html))  # type: ignore[attr-defined]

    display(m)


def create_inference_pipeline(
    model_path: str, pipeline_type: str = "fast", sequence_config: dict | None = None
) -> ONNXInferencePipeline:
    """
    –°–æ–∑–¥–∞–µ—Ç inference pipeline –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    model_path : str
        –ü—É—Ç—å –∫ ONNX –º–æ–¥–µ–ª–∏
    pipeline_type : str
        –¢–∏–ø pipeline: "fast", "memory_efficient", "gpu"
    sequence_config : dict | None
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------
    ONNXInferencePipeline
        –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é inference pipeline
    """
    if pipeline_type == "fast":
        return ONNXInferencePipelineFactory.create_fast_inference(model_path, sequence_config)
    elif pipeline_type == "memory_efficient":
        return ONNXInferencePipelineFactory.create_memory_efficient(model_path, sequence_config)
    elif pipeline_type == "gpu":
        return ONNXInferencePipelineFactory.create_gpu_inference(model_path, sequence_config)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø pipeline: {pipeline_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: fast, memory_efficient, gpu")


def print_sequence_table(
    sequences: list[np.ndarray] | np.ndarray,
    feature_names: list[str] | None = None,
    sequence_ids: list[str] | None = None,
    max_sequences: int = 5,
    max_features: int = 10,
) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    sequences : list[np.ndarray] | np.ndarray
        –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    feature_names : list[str] | None, optional
        –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    sequence_ids : list[str] | None, optional
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    max_sequences : int, default=5
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_features : int, default=10
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """

    if isinstance(sequences, np.ndarray):
        sequences = [sequences]

    sequences = sequences[:max_sequences]

    if feature_names is None:
        feature_cfg = FeatureConfig()
        feature_names = feature_cfg.sequence_features

    if sequence_ids is None:
        sequence_ids = [f"Seq_{i}" for i in range(len(sequences))]

    for seq_idx, (seq, seq_id) in enumerate(zip(sequences, sequence_ids)):
        print(f"\nüîπ {seq_id}")
        print("-" * 60)

        if len(seq.shape) == 2:
            data_matrix = seq
            n_steps, n_features = data_matrix.shape
        else:
            n_steps = len(seq)
            n_features = max(len(step) for step in seq)
            data_matrix = np.full((n_steps, n_features), np.nan)
            for i, step in enumerate(seq):
                data_matrix[i, : len(step)] = step

        n_features = min(n_features, max_features)
        data_matrix = data_matrix[:, :n_features]
        current_feature_names = feature_names[:n_features]

        df = pd.DataFrame(data_matrix, columns=current_feature_names)
        df.index = [f"–®–∞–≥ {i+1}" for i in range(n_steps)]

        print(f"–†–∞–∑–º–µ—Ä: {n_steps} —à–∞–≥–æ–≤ √ó {n_features} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(tabulate(df, headers="keys", tablefmt="grid", floatfmt=".3f"))
