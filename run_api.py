import os
import sys
import argparse
import logging
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from api.config import config
from api.service import CyclonePredictionService

logger = logging.getLogger(__name__)


def setup_logging(log_level: str = "INFO") -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(), logging.FileHandler("api.log")],
    )


def validate_model_path(model_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    if not Path(model_path).exists():
        logger.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.")
        return False
    return True


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    parser = argparse.ArgumentParser(
        description="Cyclone Trajectory Prediction API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--model-path", default=config.model_path, help=f"–ü—É—Ç—å –∫ ONNX –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.model_path})"
    )

    parser.add_argument(
        "--pipeline-type",
        choices=["fast", "memory", "gpu"],
        default=config.pipeline_type,
        help=f"–¢–∏–ø –ø–∞–π–ø–ª–∞–π–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.pipeline_type})",
    )

    parser.add_argument("--host", default=config.host, help=f"–•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.host})")

    parser.add_argument(
        "--port", type=int, default=config.port, help=f"–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.port})"
    )

    parser.add_argument(
        "--log-level",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        default=config.log_level,
        help=f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.log_level})",
    )

    parser.add_argument(
        "--reload", action="store_true", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"
    )

    parser.add_argument("--workers", type=int, default=1, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")

    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏)")

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_level)

    logger.info("üåä Cyclone Trajectory Prediction API")
    logger.info("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    if not validate_model_path(args.model_path):
        sys.exit(1)

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if args.test:
        logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        logger.info("-" * 30)

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
            service = CyclonePredictionService(model_path=args.model_path, pipeline_type=args.pipeline_type)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
            model_info = service.get_model_info()
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_info.model_path}")
            logger.info(f"   –í—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã: {model_info.inputs}")
            logger.info(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã: {model_info.outputs}")
            logger.info(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {model_info.providers}")

            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            sys.exit(1)

    os.environ["MODEL_PATH"] = args.model_path
    os.environ["PIPELINE_TYPE"] = args.pipeline_type

    logger.info(f"üìÅ –ú–æ–¥–µ–ª—å: {args.model_path}")
    logger.info(f"‚öôÔ∏è  –ü–∞–π–ø–ª–∞–π–Ω: {args.pipeline_type}")
    logger.info(f"üåê –•–æ—Å—Ç: {args.host}")
    logger.info(f"üîå –ü–æ—Ä—Ç: {args.port}")
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {args.log_level}")
    logger.info(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {'–î–∞' if args.reload else '–ù–µ—Ç'}")
    logger.info(f"üë• –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {args.workers}")

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{args.host}:{args.port}/docs")
    logger.info(f"üîç ReDoc: http://{args.host}:{args.port}/redoc")
    logger.info(f"‚ù§Ô∏è  Health check: http://{args.host}:{args.port}/health")

    try:
        import uvicorn

        uvicorn.run(
            "api.main:app",
            host=args.host,
            port=args.port,
            reload=args.reload,
            workers=args.workers if not args.reload else 1,
            log_level=args.log_level.lower(),
            access_log=True,
        )

    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
