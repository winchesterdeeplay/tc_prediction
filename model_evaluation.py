import random

import folium
import numpy as np
import pandas as pd
from IPython.display import HTML, display

from coordinate_utils import CoordinateProcessor
from features import haversine_distance


class ModelEvaluator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Ü–∏–∫–ª–æ–Ω–æ–≤.
    """

    def __init__(self, coordinate_processor: CoordinateProcessor | None = None):
        """
        Parameters
        ----------
        coordinate_processor : CoordinateProcessor, optional
            –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        """
        self.coord_processor = coordinate_processor or CoordinateProcessor()

    def evaluate_horizon(self, model, X_horizon: pd.DataFrame, y_horizon: pd.DataFrame) -> dict[str, float]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.

        Parameters
        ----------
        model : trained model
            –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –º–µ—Ç–æ–¥–æ–º predict
        X_horizon : pd.DataFrame
            –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
        y_horizon : pd.DataFrame
            –ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞

        Returns
        -------
        Dict[str, float]
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        if len(X_horizon) == 0:
            return {
                "samples": 0,
                "mean_km": np.nan,
                "median_km": np.nan,
                "max_km": np.nan,
                "p50": np.nan,
                "p100": np.nan,
                "p300": np.nan,
            }

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = model.predict(X_horizon)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat_true, lon_true, lat_pred, lon_pred = self.coord_processor.process_predictions(
            X_horizon, y_horizon, predictions
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        errors_km = haversine_distance(lat_true, lon_true, lat_pred, lon_pred)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ errors_km —ç—Ç–æ numpy array
        if isinstance(errors_km, np.ndarray):
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            return {
                "samples": len(X_horizon),
                "mean_km": float(errors_km.mean()),
                "median_km": float(np.median(errors_km)),
                "max_km": float(errors_km.max()),
                "p50": float((errors_km < 50).mean() * 100),
                "p100": float((errors_km < 100).mean() * 100),
                "p300": float((errors_km < 300).mean() * 100),
            }
        else:
            # –î–ª—è —Å–ª—É—á–∞—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            return {
                "samples": len(X_horizon),
                "mean_km": float(errors_km),
                "median_km": float(errors_km),
                "max_km": float(errors_km),
                "p50": float(100.0 if errors_km < 50 else 0.0),
                "p100": float(100.0 if errors_km < 100 else 0.0),
                "p300": float(100.0 if errors_km < 300 else 0.0),
            }

    def evaluate_all_horizons(
        self, model, X_test: pd.DataFrame, y_test: pd.DataFrame, horizons: list[int], verbose: bool = True
    ) -> dict[int, dict[str, float]]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞.

        Parameters
        ----------
        model : trained model
            –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        X_test : pd.DataFrame
            –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        y_test : pd.DataFrame
            –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã
        horizons : List[int]
            –°–ø–∏—Å–æ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
        verbose : bool
            –í—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

        Returns
        -------
        Dict[int, Dict[str, float]]
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
        """
        if verbose:
            print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò (–≤—Å–µ –æ—à–∏–±–∫–∏ ‚Äî –∫–∏–ª–æ–º–µ—Ç—Ä—ã)")
            print("=" * 110)
            print(
                f"{'–ì–æ—Ä–∏–∑–æ–Ω—Ç':<10}{'–ü—Ä–∏–º–µ—Ä–æ–≤':<10}{'–°—Ä–µ–¥–Ω—è—è (–∫–º)':<16}{'–ú–µ–¥–∏–∞–Ω–∞ (–∫–º)':<16}"
                f"{'–ú–∞–∫—Å. –æ—à–∏–±–∫–∞ (–∫–º)':<20}{'P@50 –∫–º(%)':<12}{'P@100 –∫–º(%)':<13}{'P@300 –∫–º(%)':<13}"
            )
            print("-" * 110)

        results = {}

        for horizon in horizons:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
            mask = X_test["target_time_hours"] == horizon
            X_h = X_test.loc[mask]
            y_h = y_test.loc[mask]

            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç
            try:
                horizon_results = self.evaluate_horizon(model, X_h, y_h)
                results[horizon] = horizon_results

                if verbose:
                    if horizon_results["samples"] == 0:
                        print(f"{horizon:>2} —á       {'N/A':<10}" * 7)
                    else:
                        print(
                            f"{horizon:>2} —á       {horizon_results['samples']:<10,d}"
                            f"{horizon_results['mean_km']:<16.1f}{horizon_results['median_km']:<16.1f}"
                            f"{horizon_results['max_km']:<20.1f}{horizon_results['p50']:<12.1f}"
                            f"{horizon_results['p100']:<13.1f}{horizon_results['p300']:<13.1f}"
                        )

            except Exception as e:
                if verbose:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ {horizon}—á: {e}")
                results[horizon] = {
                    "samples": 0,
                    "mean_km": np.nan,
                    "median_km": np.nan,
                    "max_km": np.nan,
                    "p50": np.nan,
                    "p100": np.nan,
                    "p300": np.nan,
                }

        return results

    def calculate_summary_metrics(self, results: dict[int, dict[str, float]]) -> dict[str, float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Å–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º.

        Parameters
        ----------
        results : Dict[int, Dict[str, float]]
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º

        Returns
        -------
        Dict[str, float]
            –°–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        """
        valid_results = [r for r in results.values() if r["samples"] > 0 and not np.isnan(r["mean_km"])]

        if not valid_results:
            return {
                "total_samples": 0,
                "avg_mean_km": np.nan,
                "avg_median_km": np.nan,
                "max_error_km": np.nan,
                "avg_p50": np.nan,
                "avg_p100": np.nan,
                "avg_p300": np.nan,
            }

        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–º–µ—Ä–æ–≤
        total_samples = sum(r["samples"] for r in valid_results)
        weights = np.array([r["samples"] for r in valid_results]) / total_samples

        return {
            "total_samples": total_samples,
            "avg_mean_km": np.average([r["mean_km"] for r in valid_results], weights=weights),
            "avg_median_km": np.average([r["median_km"] for r in valid_results], weights=weights),
            "max_error_km": max(r["max_km"] for r in valid_results),
            "avg_p50": np.average([r["p50"] for r in valid_results], weights=weights),
            "avg_p100": np.average([r["p100"] for r in valid_results], weights=weights),
            "avg_p300": np.average([r["p300"] for r in valid_results], weights=weights),
        }

    def create_cyclone_map(
        self, cyclone_id: str, cyclone_data: pd.DataFrame, model, horizon_hours: int = 6
    ) -> tuple[folium.Map | None, float, float]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–Ω–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.

        Parameters
        ----------
        cyclone_id : str
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–∏–∫–ª–æ–Ω–∞
        cyclone_data : pd.DataFrame
            –î–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–Ω–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        model : trained model
            –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        horizon_hours : int
            –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —á–∞—Å–∞—Ö

        Returns
        -------
        Tuple[Optional[folium.Map], float, float]
            –ö–∞—Ä—Ç–∞, —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É
        cyclone_data = cyclone_data[cyclone_data["target_time_hours"] == horizon_hours]
        if len(cyclone_data) == 0:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º {horizon_hours}—á –¥–ª—è —Ü–∏–∫–ª–æ–Ω–∞ {cyclone_id}")
            return None, 0, 0

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        cyclone_name = cyclone_data["storm_name"].iloc[0] if "storm_name" in cyclone_data.columns else "–±–µ–∑ –∏–º–µ–Ω–∏"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
        feature_cols = [
            col
            for col in cyclone_data.columns
            if col not in ["intl_id", "storm_name", "analysis_time", "dlat_target", "dlon_target"]
        ]
        cyclone_X = cyclone_data[feature_cols]
        cyclone_y_pred = model.predict(cyclone_X)

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        center_lat = cyclone_data["latitude_prev"].mean()
        center_lon = cyclone_data["longitude_prev"].mean()
        m = folium.Map(location=[center_lat, center_lon], zoom_start=6)

        # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        real_trajectory = []
        pred_trajectory_starts = []
        pred_trajectory_ends = []
        errors = []

        for i, (idx, row) in enumerate(cyclone_data.iterrows()):
            lat_current = row["latitude_prev"]
            lon_current = row["longitude_prev"]
            real_trajectory.append([lat_current, lon_current])

            # –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ç–µ–∫—É—â–∏–µ + –¥–µ–ª—å—Ç—ã)
            lat_target_real = lat_current + row["dlat_target"]
            lon_target_real = self.coord_processor.circ_add(np.array([lon_current]), np.array([row["dlon_target"]]))[0]

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            lat_target_pred = lat_current + cyclone_y_pred[i, 0]
            lon_target_pred = self.coord_processor.circ_add(np.array([lon_current]), np.array([cyclone_y_pred[i, 1]]))[
                0
            ]

            if not (np.isnan(lat_target_real) or np.isnan(lon_target_real)):
                target_point = [lat_target_real, lon_target_real]
                if target_point not in real_trajectory:
                    real_trajectory.append(target_point)

                pred_trajectory_starts.append([lat_current, lon_current])
                pred_trajectory_ends.append([lat_target_pred, lon_target_pred])

                # –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
                error = np.sqrt((lat_target_real - lat_target_pred) ** 2 + (lon_target_real - lon_target_pred) ** 2)
                errors.append(error)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        if len(real_trajectory) > 1:
            folium.PolyLine(real_trajectory, color="#0066FF", weight=4, opacity=0.9).add_to(m)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        for i, (start, end) in enumerate(zip(pred_trajectory_starts, pred_trajectory_ends)):
            error = errors[i] if i < len(errors) else 0
            folium.PolyLine([start, end], color="#FF6B35", weight=2, opacity=0.6, dash_array="5,3").add_to(m)
            folium.CircleMarker(
                location=end,
                radius=4,
                color="#FF4500",
                fill=True,
                fillColor="#FFB366",
                fillOpacity=0.8,
                weight=2,
                popup=f"–ü—Ä–æ–≥–Ω–æ–∑ {i+1}: ({end[0]:.2f}, {end[1]:.2f})<br>–û—à–∏–±–∫–∞: {error:.3f}¬∞",
            ).add_to(m)

        # –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
        if len(pred_trajectory_ends) > 1:
            folium.PolyLine(pred_trajectory_ends, color="#FF4500", weight=4, opacity=0.9, dash_array="8,4").add_to(m)

        # –¢–æ—á–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        for i, (lat, lon) in enumerate(real_trajectory[::2]):
            folium.CircleMarker(
                location=[lat, lon],
                radius=5,
                color="#0066FF",
                fill=True,
                fillColor="#87CEEB",
                fillOpacity=0.8,
                weight=2,
                popup=f"–¢–æ—á–∫–∞ {i+1}: ({lat:.2f}, {lon:.2f})",
            ).add_to(m)

        # –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
        if real_trajectory:
            folium.Marker(real_trajectory[0], icon=folium.Icon(color="green", icon="play")).add_to(m)
            folium.Marker(real_trajectory[-1], icon=folium.Icon(color="red", icon="stop")).add_to(m)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_error = np.mean(errors) if errors else 0
        max_error = np.max(errors) if errors else 0

        # –õ–µ–≥–µ–Ω–¥–∞
        legend_html = f"""
        <div style="position: fixed; bottom: 10px; left: 10px; width: 220px;
             background-color: rgba(255, 255, 255, 0.95); border: 1px solid #888;
             z-index: 1000; font-size: 11px; padding: 8px; border-radius: 5px;
             box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
        <div style="font-weight: bold; color: #333; margin-bottom: 4px;">
        üåÄ {cyclone_id} - {cyclone_name}</div>
        <div style="font-size: 10px; color: #666;">
        –¢–æ—á–µ–∫: {len(real_trajectory)} | –°—Ä.–æ—à–∏–±–∫–∞: {avg_error:.2f}¬∞</div>
        <div style="font-size: 10px; color: #888; margin-bottom: 2px;">
        –ü—Ä–æ–≥–Ω–æ–∑: {horizon_hours}-—á–∞—Å–æ–≤–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç</div>
        <hr style="margin: 4px 0; border: 0; border-top: 1px solid #ddd;">
        <div style="font-size: 10px; line-height: 1.3;">
        <span style="color: #0066FF; font-weight: bold;">‚îÅ‚îÅ‚îÅ</span> –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è<br>
        <span style="color: #FF4500; font-weight: bold;">‚îÖ‚îÖ‚îÖ</span> –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è<br>
        <span style="color: #FF6B35; font-weight: bold;">‚ï∂‚ï∂‚ï∂</span> –û—Ç—Ä–µ–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤<br>
        <span style="color: #28A745;">üü¢</span> –ù–∞—á–∞–ª–æ | <span style="color: #DC3545;">üî¥</span> –ö–æ–Ω–µ—Ü
        </div></div>"""
        m.get_root().html.add_child(folium.Element(legend_html))

        return m, avg_error, max_error

    def visualize_cyclones(
        self,
        model,
        test_data: pd.DataFrame,
        horizons: list[int] = [6, 24, 48],
        num_cyclones: int = 5,
        random_seed: int = 42,
        save_maps: bool = True,
        display_in_notebook: bool = True,
    ) -> dict[str, list[dict]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–Ω–æ–≤.

        Parameters
        ----------
        model : trained model
            –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        test_data : pd.DataFrame
            –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        horizons : List[int]
            –°–ø–∏—Å–æ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —á–∞—Å–∞—Ö
        num_cyclones : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        random_seed : int
            –°–∏–¥ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        save_maps : bool
            –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ HTML —Ñ–∞–π–ª—ã
        display_in_notebook : bool
            –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ –Ω–æ—É—Ç–±—É–∫–µ

        Returns
        -------
        Dict[str, List[Dict]]
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏–∫–ª–æ–Ω—ã
        random.seed(random_seed)
        unique_cyclones = test_data["intl_id"].unique()
        selected_cyclones = random.sample(list(unique_cyclones), min(num_cyclones, len(unique_cyclones)))
        print(f"üåÄ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–Ω—ã: {selected_cyclones}")

        results = {}

        for h in horizons:
            print(f"\nüìç –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {h}—á")
            maps_info = []

            for cyclone_id in selected_cyclones:
                cyclone_data = test_data[test_data["intl_id"] == cyclone_id]
                if len(cyclone_data) < 2:
                    continue

                cyclone_map, avg_error, max_error = self.create_cyclone_map(
                    cyclone_id, cyclone_data, model, horizon_hours=h
                )

                if cyclone_map is None:
                    continue

                map_info = {
                    "id": cyclone_id,
                    "name": cyclone_data["storm_name"].iloc[0] if "storm_name" in cyclone_data.columns else "–±–µ–∑ –∏–º–µ–Ω–∏",
                    "points": len(cyclone_data[cyclone_data["target_time_hours"] == h]),
                    "avg_error": avg_error,
                    "max_error": max_error,
                    "filename": None,
                    "map": cyclone_map,
                }

                if save_maps:
                    filename = f"cyclone_{cyclone_id}_{h}h_map.html"
                    cyclone_map.save(filename)
                    map_info["filename"] = filename

                maps_info.append(map_info)

                print(f"üåÄ –¶–∏–∫–ª–æ–Ω {cyclone_id} ({map_info['name']})")
                if save_maps:
                    print(f"   –§–∞–π–ª: {map_info['filename']}")
                print(f"   –¢–æ—á–µ–∫: {map_info['points']}, –°—Ä. –æ—à–∏–±–∫–∞: {avg_error:.3f}¬∞")

                if display_in_notebook:
                    display(HTML(f"<h3>–¶–∏–∫–ª–æ–Ω {cyclone_id} ‚Äî {map_info['name']} ({h}—á –ø—Ä–æ–≥–Ω–æ–∑)</h3>"))
                    display(cyclone_map)

            results[f"{h}h"] = maps_info

            # –°–≤–æ–¥–∫–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({h}—á –ø—Ä–æ–≥–Ω–æ–∑):")
            print(f"–°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç: {len(maps_info)}")
            avg_errors = [info["avg_error"] for info in maps_info if info["avg_error"] > 0]
            if avg_errors:
                print(f"–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {np.mean(avg_errors):.3f}¬∞")
                print(f"üîπ –õ—É—á—à–∏–π —Ü–∏–∫–ª–æ–Ω: {min(maps_info, key=lambda x: x['avg_error'])['id']}")
                print(f"üî∏ –•—É–¥—à–∏–π —Ü–∏–∫–ª–æ–Ω: {max(maps_info, key=lambda x: x['avg_error'])['id']}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–Ω–æ–≤.")

        return results
